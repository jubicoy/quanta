/*
 * This file is generated by jOOQ.
 */
package fi.jubic.quanta.db.tables.records;


import fi.jubic.quanta.db.tables.Task;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskRecord extends UpdatableRecordImpl<TaskRecord> implements Record10<Long, String, Long, String, Long, String, LocalDateTime, Long, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>task.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>task.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>task.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>task.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>task.worker_def_id</code>.
     */
    public void setWorkerDefId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>task.worker_def_id</code>.
     */
    public Long getWorkerDefId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>task.cron_trigger</code>.
     */
    public void setCronTrigger(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>task.cron_trigger</code>.
     */
    public String getCronTrigger() {
        return (String) get(3);
    }

    /**
     * Setter for <code>task.task_trigger</code>.
     */
    public void setTaskTrigger(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>task.task_trigger</code>.
     */
    public Long getTaskTrigger() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>task.task_type</code>.
     */
    public void setTaskType(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>task.task_type</code>.
     */
    public String getTaskType() {
        return (String) get(5);
    }

    /**
     * Setter for <code>task.deleted_at</code>.
     */
    public void setDeletedAt(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>task.deleted_at</code>.
     */
    public LocalDateTime getDeletedAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>task.data_series_id</code>.
     */
    public void setDataSeriesId(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>task.data_series_id</code>.
     */
    public Long getDataSeriesId() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>task.sync_interval_start_time</code>.
     */
    public void setSyncIntervalStartTime(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>task.sync_interval_start_time</code>.
     */
    public LocalDateTime getSyncIntervalStartTime() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>task.sync_interval_end_time</code>.
     */
    public void setSyncIntervalEndTime(LocalDateTime value) {
        set(9, value);
    }

    /**
     * Getter for <code>task.sync_interval_end_time</code>.
     */
    public LocalDateTime getSyncIntervalEndTime() {
        return (LocalDateTime) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, Long, String, Long, String, LocalDateTime, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Long, String, Long, String, Long, String, LocalDateTime, Long, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Task.TASK.ID;
    }

    @Override
    public Field<String> field2() {
        return Task.TASK.NAME;
    }

    @Override
    public Field<Long> field3() {
        return Task.TASK.WORKER_DEF_ID;
    }

    @Override
    public Field<String> field4() {
        return Task.TASK.CRON_TRIGGER;
    }

    @Override
    public Field<Long> field5() {
        return Task.TASK.TASK_TRIGGER;
    }

    @Override
    public Field<String> field6() {
        return Task.TASK.TASK_TYPE;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Task.TASK.DELETED_AT;
    }

    @Override
    public Field<Long> field8() {
        return Task.TASK.DATA_SERIES_ID;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return Task.TASK.SYNC_INTERVAL_START_TIME;
    }

    @Override
    public Field<LocalDateTime> field10() {
        return Task.TASK.SYNC_INTERVAL_END_TIME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Long component3() {
        return getWorkerDefId();
    }

    @Override
    public String component4() {
        return getCronTrigger();
    }

    @Override
    public Long component5() {
        return getTaskTrigger();
    }

    @Override
    public String component6() {
        return getTaskType();
    }

    @Override
    public LocalDateTime component7() {
        return getDeletedAt();
    }

    @Override
    public Long component8() {
        return getDataSeriesId();
    }

    @Override
    public LocalDateTime component9() {
        return getSyncIntervalStartTime();
    }

    @Override
    public LocalDateTime component10() {
        return getSyncIntervalEndTime();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Long value3() {
        return getWorkerDefId();
    }

    @Override
    public String value4() {
        return getCronTrigger();
    }

    @Override
    public Long value5() {
        return getTaskTrigger();
    }

    @Override
    public String value6() {
        return getTaskType();
    }

    @Override
    public LocalDateTime value7() {
        return getDeletedAt();
    }

    @Override
    public Long value8() {
        return getDataSeriesId();
    }

    @Override
    public LocalDateTime value9() {
        return getSyncIntervalStartTime();
    }

    @Override
    public LocalDateTime value10() {
        return getSyncIntervalEndTime();
    }

    @Override
    public TaskRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TaskRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public TaskRecord value3(Long value) {
        setWorkerDefId(value);
        return this;
    }

    @Override
    public TaskRecord value4(String value) {
        setCronTrigger(value);
        return this;
    }

    @Override
    public TaskRecord value5(Long value) {
        setTaskTrigger(value);
        return this;
    }

    @Override
    public TaskRecord value6(String value) {
        setTaskType(value);
        return this;
    }

    @Override
    public TaskRecord value7(LocalDateTime value) {
        setDeletedAt(value);
        return this;
    }

    @Override
    public TaskRecord value8(Long value) {
        setDataSeriesId(value);
        return this;
    }

    @Override
    public TaskRecord value9(LocalDateTime value) {
        setSyncIntervalStartTime(value);
        return this;
    }

    @Override
    public TaskRecord value10(LocalDateTime value) {
        setSyncIntervalEndTime(value);
        return this;
    }

    @Override
    public TaskRecord values(Long value1, String value2, Long value3, String value4, Long value5, String value6, LocalDateTime value7, Long value8, LocalDateTime value9, LocalDateTime value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskRecord
     */
    public TaskRecord() {
        super(Task.TASK);
    }

    /**
     * Create a detached, initialised TaskRecord
     */
    public TaskRecord(Long id, String name, Long workerDefId, String cronTrigger, Long taskTrigger, String taskType, LocalDateTime deletedAt, Long dataSeriesId, LocalDateTime syncIntervalStartTime, LocalDateTime syncIntervalEndTime) {
        super(Task.TASK);

        setId(id);
        setName(name);
        setWorkerDefId(workerDefId);
        setCronTrigger(cronTrigger);
        setTaskTrigger(taskTrigger);
        setTaskType(taskType);
        setDeletedAt(deletedAt);
        setDataSeriesId(dataSeriesId);
        setSyncIntervalStartTime(syncIntervalStartTime);
        setSyncIntervalEndTime(syncIntervalEndTime);
    }
}
