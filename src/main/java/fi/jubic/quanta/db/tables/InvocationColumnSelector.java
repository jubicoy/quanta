/*
 * This file is generated by jOOQ.
 */
package fi.jubic.quanta.db.tables;


import fi.jubic.quanta.db.DefaultSchema;
import fi.jubic.quanta.db.Indexes;
import fi.jubic.quanta.db.Keys;
import fi.jubic.quanta.db.tables.records.InvocationColumnSelectorRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InvocationColumnSelector extends TableImpl<InvocationColumnSelectorRecord> {

    private static final long serialVersionUID = -829810950;

    /**
     * The reference instance of <code>invocation_column_selector</code>
     */
    public static final InvocationColumnSelector INVOCATION_COLUMN_SELECTOR = new InvocationColumnSelector();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvocationColumnSelectorRecord> getRecordType() {
        return InvocationColumnSelectorRecord.class;
    }

    /**
     * The column <code>invocation_column_selector.id</code>.
     */
    public final TableField<InvocationColumnSelectorRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>invocation_column_selector.column_index</code>.
     */
    public final TableField<InvocationColumnSelectorRecord, Integer> COLUMN_INDEX = createField("column_index", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>invocation_column_selector.column_name</code>.
     */
    public final TableField<InvocationColumnSelectorRecord, String> COLUMN_NAME = createField("column_name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>invocation_column_selector.class</code>.
     */
    public final TableField<InvocationColumnSelectorRecord, String> CLASS = createField("class", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>invocation_column_selector.format</code>.
     */
    public final TableField<InvocationColumnSelectorRecord, String> FORMAT = createField("format", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>invocation_column_selector.nullable</code>.
     */
    public final TableField<InvocationColumnSelectorRecord, Boolean> NULLABLE = createField("nullable", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>invocation_column_selector.modifier</code>.
     */
    public final TableField<InvocationColumnSelectorRecord, String> MODIFIER = createField("modifier", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>invocation_column_selector.alias</code>.
     */
    public final TableField<InvocationColumnSelectorRecord, String> ALIAS = createField("alias", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>invocation_column_selector.data_series_id</code>.
     */
    public final TableField<InvocationColumnSelectorRecord, Long> DATA_SERIES_ID = createField("data_series_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>invocation_column_selector.invocation_id</code>.
     */
    public final TableField<InvocationColumnSelectorRecord, Long> INVOCATION_ID = createField("invocation_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>invocation_column_selector.worker_definition_column_id</code>.
     */
    public final TableField<InvocationColumnSelectorRecord, Long> WORKER_DEFINITION_COLUMN_ID = createField("worker_definition_column_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>invocation_column_selector</code> table reference
     */
    public InvocationColumnSelector() {
        this(DSL.name("invocation_column_selector"), null);
    }

    /**
     * Create an aliased <code>invocation_column_selector</code> table reference
     */
    public InvocationColumnSelector(String alias) {
        this(DSL.name(alias), INVOCATION_COLUMN_SELECTOR);
    }

    /**
     * Create an aliased <code>invocation_column_selector</code> table reference
     */
    public InvocationColumnSelector(Name alias) {
        this(alias, INVOCATION_COLUMN_SELECTOR);
    }

    private InvocationColumnSelector(Name alias, Table<InvocationColumnSelectorRecord> aliased) {
        this(alias, aliased, null);
    }

    private InvocationColumnSelector(Name alias, Table<InvocationColumnSelectorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> InvocationColumnSelector(Table<O> child, ForeignKey<O, InvocationColumnSelectorRecord> key) {
        super(child, key, INVOCATION_COLUMN_SELECTOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INVOCATION_COLUMN_SELECTOR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InvocationColumnSelectorRecord> getPrimaryKey() {
        return Keys.INVOCATION_COLUMN_SELECTOR_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InvocationColumnSelectorRecord>> getKeys() {
        return Arrays.<UniqueKey<InvocationColumnSelectorRecord>>asList(Keys.INVOCATION_COLUMN_SELECTOR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<InvocationColumnSelectorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InvocationColumnSelectorRecord, ?>>asList(Keys.INVOCATION_COLUMN_SELECTOR__FK_INVOCATION_COLUMN_SELECTOR_DATA_SERIES_ID, Keys.INVOCATION_COLUMN_SELECTOR__FK_INVOCATION_COLUMN_SELECTOR_INVOCATION_ID, Keys.INVOCATION_COLUMN_SELECTOR__FK_INVOCATION_COLUMN_SELECTOR_WORKER_DEFINITION_COLUMN_ID);
    }

    public DataSeries dataSeries() {
        return new DataSeries(this, Keys.INVOCATION_COLUMN_SELECTOR__FK_INVOCATION_COLUMN_SELECTOR_DATA_SERIES_ID);
    }

    public Invocation invocation() {
        return new Invocation(this, Keys.INVOCATION_COLUMN_SELECTOR__FK_INVOCATION_COLUMN_SELECTOR_INVOCATION_ID);
    }

    public WorkerDefinitionColumn workerDefinitionColumn() {
        return new WorkerDefinitionColumn(this, Keys.INVOCATION_COLUMN_SELECTOR__FK_INVOCATION_COLUMN_SELECTOR_WORKER_DEFINITION_COLUMN_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InvocationColumnSelector as(String alias) {
        return new InvocationColumnSelector(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InvocationColumnSelector as(Name alias) {
        return new InvocationColumnSelector(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InvocationColumnSelector rename(String name) {
        return new InvocationColumnSelector(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvocationColumnSelector rename(Name name) {
        return new InvocationColumnSelector(name, null);
    }
}
