/*
 * This file is generated by jOOQ.
 */
package fi.jubic.quanta.db.tables;


import fi.jubic.quanta.db.DefaultSchema;
import fi.jubic.quanta.db.Indexes;
import fi.jubic.quanta.db.Keys;
import fi.jubic.quanta.db.tables.records.DetectionResultRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DetectionResult extends TableImpl<DetectionResultRecord> {

    private static final long serialVersionUID = -1824311426;

    /**
     * The reference instance of <code>detection_result</code>
     */
    public static final DetectionResult DETECTION_RESULT = new DetectionResult();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DetectionResultRecord> getRecordType() {
        return DetectionResultRecord.class;
    }

    /**
     * The column <code>detection_result.id</code>.
     */
    public final TableField<DetectionResultRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>detection_result.invocation_id</code>.
     */
    public final TableField<DetectionResultRecord, Long> INVOCATION_ID = createField("invocation_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>detection_result.starting_time</code>.
     */
    public final TableField<DetectionResultRecord, Timestamp> STARTING_TIME = createField("starting_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>detection_result.ending_time</code>.
     */
    public final TableField<DetectionResultRecord, Timestamp> ENDING_TIME = createField("ending_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>detection_result.values</code>.
     */
    public final TableField<DetectionResultRecord, String> VALUES = createField("values", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>detection_result.classification</code>.
     */
    public final TableField<DetectionResultRecord, String> CLASSIFICATION = createField("classification", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>detection_result.probability</code>.
     */
    public final TableField<DetectionResultRecord, Double> PROBABILITY = createField("probability", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>detection_result.delta_max</code>.
     */
    public final TableField<DetectionResultRecord, String> DELTA_MAX = createField("delta_max", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>detection_result</code> table reference
     */
    public DetectionResult() {
        this(DSL.name("detection_result"), null);
    }

    /**
     * Create an aliased <code>detection_result</code> table reference
     */
    public DetectionResult(String alias) {
        this(DSL.name(alias), DETECTION_RESULT);
    }

    /**
     * Create an aliased <code>detection_result</code> table reference
     */
    public DetectionResult(Name alias) {
        this(alias, DETECTION_RESULT);
    }

    private DetectionResult(Name alias, Table<DetectionResultRecord> aliased) {
        this(alias, aliased, null);
    }

    private DetectionResult(Name alias, Table<DetectionResultRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DetectionResult(Table<O> child, ForeignKey<O, DetectionResultRecord> key) {
        super(child, key, DETECTION_RESULT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DETECTION_RESULT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DetectionResultRecord> getPrimaryKey() {
        return Keys.DETECTION_RESULT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DetectionResultRecord>> getKeys() {
        return Arrays.<UniqueKey<DetectionResultRecord>>asList(Keys.DETECTION_RESULT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DetectionResultRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DetectionResultRecord, ?>>asList(Keys.DETECTION_RESULT__FK_RESULT_INVOCATION_ID);
    }

    public Invocation invocation() {
        return new Invocation(this, Keys.DETECTION_RESULT__FK_RESULT_INVOCATION_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DetectionResult as(String alias) {
        return new DetectionResult(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DetectionResult as(Name alias) {
        return new DetectionResult(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DetectionResult rename(String name) {
        return new DetectionResult(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DetectionResult rename(Name name) {
        return new DetectionResult(name, null);
    }
}
