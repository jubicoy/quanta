/*
 * This file is generated by jOOQ.
 */
package fi.jubic.quanta.db.tables;


import fi.jubic.quanta.db.DefaultSchema;
import fi.jubic.quanta.db.Keys;
import fi.jubic.quanta.db.tables.records.InvocationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invocation extends TableImpl<InvocationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>invocation</code>
     */
    public static final Invocation INVOCATION = new Invocation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvocationRecord> getRecordType() {
        return InvocationRecord.class;
    }

    /**
     * The column <code>invocation.id</code>.
     */
    public final TableField<InvocationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>invocation.invocation_number</code>.
     */
    public final TableField<InvocationRecord, Long> INVOCATION_NUMBER = createField(DSL.name("invocation_number"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>invocation.status</code>.
     */
    public final TableField<InvocationRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>invocation.task_id</code>.
     */
    public final TableField<InvocationRecord, Long> TASK_ID = createField(DSL.name("task_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>invocation.worker_id</code>.
     */
    public final TableField<InvocationRecord, Long> WORKER_ID = createField(DSL.name("worker_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>invocation.starting_time</code>.
     */
    public final TableField<InvocationRecord, LocalDateTime> STARTING_TIME = createField(DSL.name("starting_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>invocation.ending_time</code>.
     */
    public final TableField<InvocationRecord, LocalDateTime> ENDING_TIME = createField(DSL.name("ending_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>invocation.deleted_at</code>.
     */
    public final TableField<InvocationRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private Invocation(Name alias, Table<InvocationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Invocation(Name alias, Table<InvocationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>invocation</code> table reference
     */
    public Invocation(String alias) {
        this(DSL.name(alias), INVOCATION);
    }

    /**
     * Create an aliased <code>invocation</code> table reference
     */
    public Invocation(Name alias) {
        this(alias, INVOCATION);
    }

    /**
     * Create a <code>invocation</code> table reference
     */
    public Invocation() {
        this(DSL.name("invocation"), null);
    }

    public <O extends Record> Invocation(Table<O> child, ForeignKey<O, InvocationRecord> key) {
        super(child, key, INVOCATION);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<InvocationRecord, Long> getIdentity() {
        return (Identity<InvocationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<InvocationRecord> getPrimaryKey() {
        return Keys.INVOCATION_PKEY;
    }

    @Override
    public List<UniqueKey<InvocationRecord>> getKeys() {
        return Arrays.<UniqueKey<InvocationRecord>>asList(Keys.INVOCATION_PKEY, Keys.INVOCATION_TASK_ID_INVOCATION_NUMBER_KEY);
    }

    @Override
    public List<ForeignKey<InvocationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InvocationRecord, ?>>asList(Keys.INVOCATION__FK_INVOCATION_TASK_ID, Keys.INVOCATION__FK_INVOCATION_WORKER_ID);
    }

    public Task task() {
        return new Task(this, Keys.INVOCATION__FK_INVOCATION_TASK_ID);
    }

    public Worker worker() {
        return new Worker(this, Keys.INVOCATION__FK_INVOCATION_WORKER_ID);
    }

    @Override
    public Invocation as(String alias) {
        return new Invocation(DSL.name(alias), this);
    }

    @Override
    public Invocation as(Name alias) {
        return new Invocation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Invocation rename(String name) {
        return new Invocation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invocation rename(Name name) {
        return new Invocation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, Long, Long, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
