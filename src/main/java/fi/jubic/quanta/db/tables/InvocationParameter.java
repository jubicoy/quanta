/*
 * This file is generated by jOOQ.
 */
package fi.jubic.quanta.db.tables;


import fi.jubic.quanta.db.DefaultSchema;
import fi.jubic.quanta.db.Indexes;
import fi.jubic.quanta.db.Keys;
import fi.jubic.quanta.db.tables.records.InvocationParameterRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InvocationParameter extends TableImpl<InvocationParameterRecord> {

    private static final long serialVersionUID = 1964969251;

    /**
     * The reference instance of <code>invocation_parameter</code>
     */
    public static final InvocationParameter INVOCATION_PARAMETER = new InvocationParameter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvocationParameterRecord> getRecordType() {
        return InvocationParameterRecord.class;
    }

    /**
     * The column <code>invocation_parameter.id</code>.
     */
    public final TableField<InvocationParameterRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>invocation_parameter.name</code>.
     */
    public final TableField<InvocationParameterRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>invocation_parameter.value</code>.
     */
    public final TableField<InvocationParameterRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>invocation_parameter.invocation_id</code>.
     */
    public final TableField<InvocationParameterRecord, Long> INVOCATION_ID = createField("invocation_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>invocation_parameter</code> table reference
     */
    public InvocationParameter() {
        this(DSL.name("invocation_parameter"), null);
    }

    /**
     * Create an aliased <code>invocation_parameter</code> table reference
     */
    public InvocationParameter(String alias) {
        this(DSL.name(alias), INVOCATION_PARAMETER);
    }

    /**
     * Create an aliased <code>invocation_parameter</code> table reference
     */
    public InvocationParameter(Name alias) {
        this(alias, INVOCATION_PARAMETER);
    }

    private InvocationParameter(Name alias, Table<InvocationParameterRecord> aliased) {
        this(alias, aliased, null);
    }

    private InvocationParameter(Name alias, Table<InvocationParameterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> InvocationParameter(Table<O> child, ForeignKey<O, InvocationParameterRecord> key) {
        super(child, key, INVOCATION_PARAMETER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INVOCATION_PARAMETER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InvocationParameterRecord> getPrimaryKey() {
        return Keys.INVOCATION_PARAMETER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InvocationParameterRecord>> getKeys() {
        return Arrays.<UniqueKey<InvocationParameterRecord>>asList(Keys.INVOCATION_PARAMETER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<InvocationParameterRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InvocationParameterRecord, ?>>asList(Keys.INVOCATION_PARAMETER__FK_INVOCATION_PARAMETER);
    }

    public Invocation invocation() {
        return new Invocation(this, Keys.INVOCATION_PARAMETER__FK_INVOCATION_PARAMETER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InvocationParameter as(String alias) {
        return new InvocationParameter(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InvocationParameter as(Name alias) {
        return new InvocationParameter(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InvocationParameter rename(String name) {
        return new InvocationParameter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvocationParameter rename(Name name) {
        return new InvocationParameter(name, null);
    }
}
