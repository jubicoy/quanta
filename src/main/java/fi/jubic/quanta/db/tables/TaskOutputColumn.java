/*
 * This file is generated by jOOQ.
 */
package fi.jubic.quanta.db.tables;


import fi.jubic.quanta.db.DefaultSchema;
import fi.jubic.quanta.db.Keys;
import fi.jubic.quanta.db.tables.records.TaskOutputColumnRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskOutputColumn extends TableImpl<TaskOutputColumnRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>task_output_column</code>
     */
    public static final TaskOutputColumn TASK_OUTPUT_COLUMN = new TaskOutputColumn();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskOutputColumnRecord> getRecordType() {
        return TaskOutputColumnRecord.class;
    }

    /**
     * The column <code>task_output_column.id</code>.
     */
    public final TableField<TaskOutputColumnRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>task_output_column.index</code>.
     */
    public final TableField<TaskOutputColumnRecord, Integer> INDEX = createField(DSL.name("index"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>task_output_column.alias</code>.
     */
    public final TableField<TaskOutputColumnRecord, String> ALIAS = createField(DSL.name("alias"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>task_output_column.column_name</code>.
     */
    public final TableField<TaskOutputColumnRecord, String> COLUMN_NAME = createField(DSL.name("column_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>task_output_column.class</code>.
     */
    public final TableField<TaskOutputColumnRecord, String> CLASS = createField(DSL.name("class"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>task_output_column.format</code>.
     */
    public final TableField<TaskOutputColumnRecord, String> FORMAT = createField(DSL.name("format"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>task_output_column.nullable</code>.
     */
    public final TableField<TaskOutputColumnRecord, Boolean> NULLABLE = createField(DSL.name("nullable"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>task_output_column.task_id</code>.
     */
    public final TableField<TaskOutputColumnRecord, Long> TASK_ID = createField(DSL.name("task_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private TaskOutputColumn(Name alias, Table<TaskOutputColumnRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskOutputColumn(Name alias, Table<TaskOutputColumnRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>task_output_column</code> table reference
     */
    public TaskOutputColumn(String alias) {
        this(DSL.name(alias), TASK_OUTPUT_COLUMN);
    }

    /**
     * Create an aliased <code>task_output_column</code> table reference
     */
    public TaskOutputColumn(Name alias) {
        this(alias, TASK_OUTPUT_COLUMN);
    }

    /**
     * Create a <code>task_output_column</code> table reference
     */
    public TaskOutputColumn() {
        this(DSL.name("task_output_column"), null);
    }

    public <O extends Record> TaskOutputColumn(Table<O> child, ForeignKey<O, TaskOutputColumnRecord> key) {
        super(child, key, TASK_OUTPUT_COLUMN);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TaskOutputColumnRecord, Long> getIdentity() {
        return (Identity<TaskOutputColumnRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaskOutputColumnRecord> getPrimaryKey() {
        return Keys.TASK_OUTPUT_COLUMN_PKEY;
    }

    @Override
    public List<UniqueKey<TaskOutputColumnRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskOutputColumnRecord>>asList(Keys.TASK_OUTPUT_COLUMN_PKEY);
    }

    @Override
    public List<ForeignKey<TaskOutputColumnRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TaskOutputColumnRecord, ?>>asList(Keys.TASK_OUTPUT_COLUMN__FK_TASK_OUTPUT_COLUMN_TASK_ID);
    }

    public Task task() {
        return new Task(this, Keys.TASK_OUTPUT_COLUMN__FK_TASK_OUTPUT_COLUMN_TASK_ID);
    }

    @Override
    public TaskOutputColumn as(String alias) {
        return new TaskOutputColumn(DSL.name(alias), this);
    }

    @Override
    public TaskOutputColumn as(Name alias) {
        return new TaskOutputColumn(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskOutputColumn rename(String name) {
        return new TaskOutputColumn(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskOutputColumn rename(Name name) {
        return new TaskOutputColumn(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Integer, String, String, String, String, Boolean, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
