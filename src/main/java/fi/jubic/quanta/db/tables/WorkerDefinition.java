/*
 * This file is generated by jOOQ.
 */
package fi.jubic.quanta.db.tables;


import fi.jubic.quanta.db.DefaultSchema;
import fi.jubic.quanta.db.Indexes;
import fi.jubic.quanta.db.Keys;
import fi.jubic.quanta.db.tables.records.WorkerDefinitionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkerDefinition extends TableImpl<WorkerDefinitionRecord> {

    private static final long serialVersionUID = 27465838;

    /**
     * The reference instance of <code>worker_definition</code>
     */
    public static final WorkerDefinition WORKER_DEFINITION = new WorkerDefinition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkerDefinitionRecord> getRecordType() {
        return WorkerDefinitionRecord.class;
    }

    /**
     * The column <code>worker_definition.id</code>.
     */
    public final TableField<WorkerDefinitionRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>worker_definition.type</code>.
     */
    public final TableField<WorkerDefinitionRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>worker_definition.name</code>.
     */
    public final TableField<WorkerDefinitionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>worker_definition.description</code>.
     */
    public final TableField<WorkerDefinitionRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>worker_definition.deleted_at</code>.
     */
    public final TableField<WorkerDefinitionRecord, Timestamp> DELETED_AT = createField("deleted_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>worker_definition</code> table reference
     */
    public WorkerDefinition() {
        this(DSL.name("worker_definition"), null);
    }

    /**
     * Create an aliased <code>worker_definition</code> table reference
     */
    public WorkerDefinition(String alias) {
        this(DSL.name(alias), WORKER_DEFINITION);
    }

    /**
     * Create an aliased <code>worker_definition</code> table reference
     */
    public WorkerDefinition(Name alias) {
        this(alias, WORKER_DEFINITION);
    }

    private WorkerDefinition(Name alias, Table<WorkerDefinitionRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkerDefinition(Name alias, Table<WorkerDefinitionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> WorkerDefinition(Table<O> child, ForeignKey<O, WorkerDefinitionRecord> key) {
        super(child, key, WORKER_DEFINITION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKER_DEFINITION_NAME_KEY, Indexes.WORKER_DEFINITION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WorkerDefinitionRecord> getPrimaryKey() {
        return Keys.WORKER_DEFINITION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WorkerDefinitionRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkerDefinitionRecord>>asList(Keys.WORKER_DEFINITION_PKEY, Keys.WORKER_DEFINITION_NAME_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkerDefinition as(String alias) {
        return new WorkerDefinition(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WorkerDefinition as(Name alias) {
        return new WorkerDefinition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkerDefinition rename(String name) {
        return new WorkerDefinition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkerDefinition rename(Name name) {
        return new WorkerDefinition(name, null);
    }
}
