/*
 * This file is generated by jOOQ.
 */
package fi.jubic.quanta.db.tables;


import fi.jubic.quanta.db.DefaultSchema;
import fi.jubic.quanta.db.Keys;
import fi.jubic.quanta.db.tables.records.AnomalyRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Anomaly extends TableImpl<AnomalyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>anomaly</code>
     */
    public static final Anomaly ANOMALY = new Anomaly();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnomalyRecord> getRecordType() {
        return AnomalyRecord.class;
    }

    /**
     * The column <code>anomaly.id</code>.
     */
    public final TableField<AnomalyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>anomaly.invocation_id</code>.
     */
    public final TableField<AnomalyRecord, Long> INVOCATION_ID = createField(DSL.name("invocation_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>anomaly.starting_time</code>.
     */
    public final TableField<AnomalyRecord, LocalDateTime> STARTING_TIME = createField(DSL.name("starting_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>anomaly.ending_time</code>.
     */
    public final TableField<AnomalyRecord, LocalDateTime> ENDING_TIME = createField(DSL.name("ending_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>anomaly.sample</code>.
     */
    public final TableField<AnomalyRecord, String> SAMPLE = createField(DSL.name("sample"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>anomaly.classification</code>.
     */
    public final TableField<AnomalyRecord, String> CLASSIFICATION = createField(DSL.name("classification"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>anomaly.probability</code>.
     */
    public final TableField<AnomalyRecord, Double> PROBABILITY = createField(DSL.name("probability"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>anomaly.metadata</code>.
     */
    public final TableField<AnomalyRecord, String> METADATA = createField(DSL.name("metadata"), SQLDataType.CLOB.nullable(false), this, "");

    private Anomaly(Name alias, Table<AnomalyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Anomaly(Name alias, Table<AnomalyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>anomaly</code> table reference
     */
    public Anomaly(String alias) {
        this(DSL.name(alias), ANOMALY);
    }

    /**
     * Create an aliased <code>anomaly</code> table reference
     */
    public Anomaly(Name alias) {
        this(alias, ANOMALY);
    }

    /**
     * Create a <code>anomaly</code> table reference
     */
    public Anomaly() {
        this(DSL.name("anomaly"), null);
    }

    public <O extends Record> Anomaly(Table<O> child, ForeignKey<O, AnomalyRecord> key) {
        super(child, key, ANOMALY);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<AnomalyRecord, Long> getIdentity() {
        return (Identity<AnomalyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnomalyRecord> getPrimaryKey() {
        return Keys.DETECTION_RESULT_PKEY;
    }

    @Override
    public List<UniqueKey<AnomalyRecord>> getKeys() {
        return Arrays.<UniqueKey<AnomalyRecord>>asList(Keys.DETECTION_RESULT_PKEY);
    }

    @Override
    public List<ForeignKey<AnomalyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AnomalyRecord, ?>>asList(Keys.ANOMALY__FK_RESULT_INVOCATION_ID);
    }

    public Invocation invocation() {
        return new Invocation(this, Keys.ANOMALY__FK_RESULT_INVOCATION_ID);
    }

    @Override
    public Anomaly as(String alias) {
        return new Anomaly(DSL.name(alias), this);
    }

    @Override
    public Anomaly as(Name alias) {
        return new Anomaly(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Anomaly rename(String name) {
        return new Anomaly(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Anomaly rename(Name name) {
        return new Anomaly(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, LocalDateTime, LocalDateTime, String, String, Double, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
