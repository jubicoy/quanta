/*
 * This file is generated by jOOQ.
 */
package fi.jubic.quanta.db.tables;


import fi.jubic.quanta.db.DefaultSchema;
import fi.jubic.quanta.db.Indexes;
import fi.jubic.quanta.db.Keys;
import fi.jubic.quanta.db.tables.records.TaskRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Task extends TableImpl<TaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>task</code>
     */
    public static final Task TASK = new Task();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskRecord> getRecordType() {
        return TaskRecord.class;
    }

    /**
     * The column <code>task.id</code>.
     */
    public final TableField<TaskRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>task.name</code>.
     */
    public final TableField<TaskRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>task.worker_def_id</code>.
     */
    public final TableField<TaskRecord, Long> WORKER_DEF_ID = createField(DSL.name("worker_def_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>task.cron_trigger</code>.
     */
    public final TableField<TaskRecord, String> CRON_TRIGGER = createField(DSL.name("cron_trigger"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>task.task_trigger</code>.
     */
    public final TableField<TaskRecord, Long> TASK_TRIGGER = createField(DSL.name("task_trigger"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>task.task_type</code>.
     */
    public final TableField<TaskRecord, String> TASK_TYPE = createField(DSL.name("task_type"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.field("'process'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>task.deleted_at</code>.
     */
    public final TableField<TaskRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>task.data_series_id</code>.
     */
    public final TableField<TaskRecord, Long> DATA_SERIES_ID = createField(DSL.name("data_series_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>task.sync_interval_offset</code>.
     */
    public final TableField<TaskRecord, Long> SYNC_INTERVAL_OFFSET = createField(DSL.name("sync_interval_offset"), SQLDataType.BIGINT, this, "");

    private Task(Name alias, Table<TaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private Task(Name alias, Table<TaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>task</code> table reference
     */
    public Task(String alias) {
        this(DSL.name(alias), TASK);
    }

    /**
     * Create an aliased <code>task</code> table reference
     */
    public Task(Name alias) {
        this(alias, TASK);
    }

    /**
     * Create a <code>task</code> table reference
     */
    public Task() {
        this(DSL.name("task"), null);
    }

    public <O extends Record> Task(Table<O> child, ForeignKey<O, TaskRecord> key) {
        super(child, key, TASK);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TASK_NAME_KEY);
    }

    @Override
    public Identity<TaskRecord, Long> getIdentity() {
        return (Identity<TaskRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaskRecord> getPrimaryKey() {
        return Keys.TASK_PKEY;
    }

    @Override
    public List<UniqueKey<TaskRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskRecord>>asList(Keys.TASK_PKEY);
    }

    @Override
    public List<ForeignKey<TaskRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TaskRecord, ?>>asList(Keys.TASK__FK_TASK_WORKER_DEF_ID, Keys.TASK__FK_TASK_DATA_SERIES_ID);
    }

    public WorkerDefinition workerDefinition() {
        return new WorkerDefinition(this, Keys.TASK__FK_TASK_WORKER_DEF_ID);
    }

    public DataSeries dataSeries() {
        return new DataSeries(this, Keys.TASK__FK_TASK_DATA_SERIES_ID);
    }

    @Override
    public Task as(String alias) {
        return new Task(DSL.name(alias), this);
    }

    @Override
    public Task as(Name alias) {
        return new Task(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(String name) {
        return new Task(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(Name name) {
        return new Task(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, Long, String, Long, String, LocalDateTime, Long, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
