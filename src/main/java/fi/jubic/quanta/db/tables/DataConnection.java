/*
 * This file is generated by jOOQ.
 */
package fi.jubic.quanta.db.tables;


import fi.jubic.quanta.db.DefaultSchema;
import fi.jubic.quanta.db.Keys;
import fi.jubic.quanta.db.tables.records.DataConnectionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataConnection extends TableImpl<DataConnectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>data_connection</code>
     */
    public static final DataConnection DATA_CONNECTION = new DataConnection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataConnectionRecord> getRecordType() {
        return DataConnectionRecord.class;
    }

    /**
     * The column <code>data_connection.id</code>.
     */
    public final TableField<DataConnectionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>data_connection.name</code>.
     */
    public final TableField<DataConnectionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>data_connection.description</code>.
     */
    public final TableField<DataConnectionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data_connection.type</code>.
     */
    public final TableField<DataConnectionRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>data_connection.configuration</code>.
     */
    public final TableField<DataConnectionRecord, String> CONFIGURATION = createField(DSL.name("configuration"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>data_connection.deleted_at</code>.
     */
    public final TableField<DataConnectionRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private DataConnection(Name alias, Table<DataConnectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataConnection(Name alias, Table<DataConnectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>data_connection</code> table reference
     */
    public DataConnection(String alias) {
        this(DSL.name(alias), DATA_CONNECTION);
    }

    /**
     * Create an aliased <code>data_connection</code> table reference
     */
    public DataConnection(Name alias) {
        this(alias, DATA_CONNECTION);
    }

    /**
     * Create a <code>data_connection</code> table reference
     */
    public DataConnection() {
        this(DSL.name("data_connection"), null);
    }

    public <O extends Record> DataConnection(Table<O> child, ForeignKey<O, DataConnectionRecord> key) {
        super(child, key, DATA_CONNECTION);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<DataConnectionRecord, Long> getIdentity() {
        return (Identity<DataConnectionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DataConnectionRecord> getPrimaryKey() {
        return Keys.DATA_CONNECTION_PKEY;
    }

    @Override
    public List<UniqueKey<DataConnectionRecord>> getKeys() {
        return Arrays.<UniqueKey<DataConnectionRecord>>asList(Keys.DATA_CONNECTION_PKEY, Keys.DATA_CONNECTION_NAME_KEY);
    }

    @Override
    public DataConnection as(String alias) {
        return new DataConnection(DSL.name(alias), this);
    }

    @Override
    public DataConnection as(Name alias) {
        return new DataConnection(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataConnection rename(String name) {
        return new DataConnection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataConnection rename(Name name) {
        return new DataConnection(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
