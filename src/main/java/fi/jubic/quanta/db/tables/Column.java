/*
 * This file is generated by jOOQ.
 */
package fi.jubic.quanta.db.tables;


import fi.jubic.quanta.db.DefaultSchema;
import fi.jubic.quanta.db.Indexes;
import fi.jubic.quanta.db.Keys;
import fi.jubic.quanta.db.tables.records.ColumnRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Column extends TableImpl<ColumnRecord> {

    private static final long serialVersionUID = 1839152478;

    /**
     * The reference instance of <code>column</code>
     */
    public static final Column COLUMN = new Column();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ColumnRecord> getRecordType() {
        return ColumnRecord.class;
    }

    /**
     * The column <code>column.id</code>.
     */
    public final TableField<ColumnRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>column.name</code>.
     */
    public final TableField<ColumnRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>column.class</code>.
     */
    public final TableField<ColumnRecord, String> CLASS = createField("class", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>column.format</code>.
     */
    public final TableField<ColumnRecord, String> FORMAT = createField("format", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>column.nullable</code>.
     */
    public final TableField<ColumnRecord, Boolean> NULLABLE = createField("nullable", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>column.data_series_id</code>.
     */
    public final TableField<ColumnRecord, Long> DATA_SERIES_ID = createField("data_series_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>column.index</code>.
     */
    public final TableField<ColumnRecord, Integer> INDEX = createField("index", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>column</code> table reference
     */
    public Column() {
        this(DSL.name("column"), null);
    }

    /**
     * Create an aliased <code>column</code> table reference
     */
    public Column(String alias) {
        this(DSL.name(alias), COLUMN);
    }

    /**
     * Create an aliased <code>column</code> table reference
     */
    public Column(Name alias) {
        this(alias, COLUMN);
    }

    private Column(Name alias, Table<ColumnRecord> aliased) {
        this(alias, aliased, null);
    }

    private Column(Name alias, Table<ColumnRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Column(Table<O> child, ForeignKey<O, ColumnRecord> key) {
        super(child, key, COLUMN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COLUMN_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ColumnRecord> getPrimaryKey() {
        return Keys.COLUMN_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ColumnRecord>> getKeys() {
        return Arrays.<UniqueKey<ColumnRecord>>asList(Keys.COLUMN_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ColumnRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ColumnRecord, ?>>asList(Keys.COLUMN__FK_COLUMN_DATA_SERIES_ID);
    }

    public DataSeries dataSeries() {
        return new DataSeries(this, Keys.COLUMN__FK_COLUMN_DATA_SERIES_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Column as(String alias) {
        return new Column(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Column as(Name alias) {
        return new Column(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Column rename(String name) {
        return new Column(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Column rename(Name name) {
        return new Column(name, null);
    }
}
