/*
 * This file is generated by jOOQ.
 */
package fi.jubic.quanta.db.tables;


import fi.jubic.quanta.db.DefaultSchema;
import fi.jubic.quanta.db.Keys;
import fi.jubic.quanta.db.tables.records.TagDataconnectionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagDataconnection extends TableImpl<TagDataconnectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tag_dataconnection</code>
     */
    public static final TagDataconnection TAG_DATACONNECTION = new TagDataconnection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagDataconnectionRecord> getRecordType() {
        return TagDataconnectionRecord.class;
    }

    /**
     * The column <code>tag_dataconnection.tag_id</code>.
     */
    public final TableField<TagDataconnectionRecord, Long> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tag_dataconnection.dataconnection_id</code>.
     */
    public final TableField<TagDataconnectionRecord, Long> DATACONNECTION_ID = createField(DSL.name("dataconnection_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private TagDataconnection(Name alias, Table<TagDataconnectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private TagDataconnection(Name alias, Table<TagDataconnectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tag_dataconnection</code> table reference
     */
    public TagDataconnection(String alias) {
        this(DSL.name(alias), TAG_DATACONNECTION);
    }

    /**
     * Create an aliased <code>tag_dataconnection</code> table reference
     */
    public TagDataconnection(Name alias) {
        this(alias, TAG_DATACONNECTION);
    }

    /**
     * Create a <code>tag_dataconnection</code> table reference
     */
    public TagDataconnection() {
        this(DSL.name("tag_dataconnection"), null);
    }

    public <O extends Record> TagDataconnection(Table<O> child, ForeignKey<O, TagDataconnectionRecord> key) {
        super(child, key, TAG_DATACONNECTION);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TagDataconnectionRecord> getPrimaryKey() {
        return Keys.PK_TAG_DATACONNECTION;
    }

    @Override
    public List<UniqueKey<TagDataconnectionRecord>> getKeys() {
        return Arrays.<UniqueKey<TagDataconnectionRecord>>asList(Keys.PK_TAG_DATACONNECTION);
    }

    @Override
    public TagDataconnection as(String alias) {
        return new TagDataconnection(DSL.name(alias), this);
    }

    @Override
    public TagDataconnection as(Name alias) {
        return new TagDataconnection(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TagDataconnection rename(String name) {
        return new TagDataconnection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TagDataconnection rename(Name name) {
        return new TagDataconnection(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
